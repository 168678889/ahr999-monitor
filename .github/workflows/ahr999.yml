name: Ahr999指数监控系统
on:
  schedule:
    - cron: '30 * * * *'  # 每小时第30分钟运行
  workflow_dispatch:

jobs:
  monitor:
    runs-on: ubuntu-latest
    steps:
    # ========== 环境准备 ==========
    - name: 安装系统依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          chromium-browser \
          libnss3 \
          libatk1.0-0 \
          libx11-xcb1 \
          libxcb1 \
          libxcomposite1 \
          libxdamage1 \
          libxext6 \
          libxfixes3 \
          libxrandr2 \
          libgbm1

    - name: 配置Node.js环境
      uses: actions/setup-node@v3
      with:
        node-version: 18

    # ========== 数据抓取模块 ==========
    - name: 获取指数数据
      id: data-crawler
      run: |
        node <<EOF
        const fs = require('fs');
        const puppeteer = require('puppeteer');

        (async () => {
          const browser = await puppeteer.launch({
            executablePath: '/usr/bin/chromium-browser',
            args: ['--no-sandbox', '--disable-setuid-sandbox']
          });

          try {
            const page = await browser.newPage();
          
            // 尝试多个数据源
            const sources = [
              {
                url: 'https://www.feixiaohao.com/data/ahrdata.html',
                selector: 'div.val',
                handler: text => parseFloat(text.replace(/[^0-9.]/g, ''))
              },
              {
                url: 'https://ahr999.com',
                selector: '#current_value',
                handler: text => parseFloat(text.match(/\d+\.?\d*/)[0])
              }
            ];

            let finalValue = null;
            for (const source of sources) {
              try {
                await page.goto(source.url, {timeout: 60000});
                await page.waitForSelector(source.selector, {timeout: 15000});
                const text = await page.$eval(source.selector, el => el.textContent);
                finalValue = source.handler(text);
                break;
              } catch (e) {}
            }

            // 写入输出变量
            fs.appendFileSync(
              process.env.GITHUB_OUTPUT, 
              `ahr999_value=${finalValue}`
            );
          } finally {
            await browser.close();
          }
        })();
        EOF

    # ========== 通知模块 ==========
    - name: 发送邮件提醒
      if: |
        steps.data-crawler.outputs.ahr999_value != '' &&
        (steps.data-crawler.outputs.ahr999_value <= 0.8 || steps.data-crawler.outputs.ahr999_value >= 1.2)
      env:
        SMTP_USER: ${{ secrets.SMTP_USER }}
        SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
        RECEIVER_EMAIL: ${{ secrets.RECEIVER_EMAIL }}
      run: |
        python3 -c "
        import smtplib, os
        from email.mime.text import MIMEText

        value = ${{ steps.data-crawler.outputs.ahr999_value }}
      
        # 分级内容模板
        if value <= 0.45:
            subject = '🚨 极度低估 (Ahr999=%.2f)' % value
            content = '''建议立即行动：
            - 使用50%资金抄底
            - 剩余资金分3批挂单(0.45/0.40/0.35)'''
        elif value <= 0.8:
            subject = '🚩 中度低估 (Ahr999=%.2f)' % value
            content = '''建议操作：
            - 启动周定投计划
            - 每下跌0.1加仓20%'''
        else:
            subject = '⚠️ 风险预警 (Ahr999=%.2f)' % value
            content = '''建议操作：
            - 分批卖出(30%/50%/20%)
            - 保留10%底仓'''

        # 构建邮件
        msg = MIMEText(content, 'plain', 'utf-8')
        msg['Subject'] = subject
        msg['From'] = f'监控系统 <{os.environ["SMTP_USER"]}>'
        msg['To'] = os.environ["RECEIVER_EMAIL"]

        # 发送邮件
        with smtplib.SMTP_SSL('smtp.qq.com', 465) as server:
            server.login(os.environ["SMTP_USER"], os.environ["SMTP_PASSWORD"])
            server.sendmail(os.environ["SMTP_USER"], [os.environ["RECEIVER_EMAIL"]], msg.as_string())
        "
