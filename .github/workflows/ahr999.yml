name: Ahr999自计算监控
on:
  schedule:
    - cron: '0 */2 * * *'  # 每2小时运行一次
  workflow_dispatch:

jobs:
  monitor:
    runs-on: ubuntu-latest
    steps:
    # ========== 数据获取 ==========
    - name: 获取比特币价格
      id: get-price
      run: |
        PRICE=$(curl -s "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd" | jq -r '.bitcoin.usd')
        echo "price=$PRICE" >> $GITHUB_OUTPUT

    - name: 获取S2F数据
      id: get-s2f
      run: |
        # Glassnode S2F API (需注册获取API_KEY)
        # S2F=$(curl -s -X GET "https://api.glassnode.com/v1/metrics/indicators/sopr" -H "X-Api-Key:${{ secrets.GLASSNODE_API_KEY }}" | jq '.[-1].v')
      
        # 备用S2F计算（基于链上数据估算）
        BLOCKS_PER_YEAR=52560  # 每年区块数
        CURRENT_BLOCK_HEIGHT=$(curl -s https://blockchain.info/q/getblockcount)
        TOTAL_BTC=$(curl -s https://blockchain.info/q/totalbc | awk '{print $1/100000000}')
        YEARLY_ISSUANCE=$(echo "50*6*24*365 / 100000000" | bc -l)
        S2F=$(echo "$TOTAL_BTC / $YEARLY_ISSUANCE" | bc -l)
        echo "s2f=$S2F" >> $GITHUB_OUTPUT

    # ========== 计算Ahr999指数 ==========
    - name: 计算指数
      id: calculate
      run: |
        # 获取200周平均价（使用CoinGecko历史数据）
        START_DATE=$(date -d "200 weeks ago" +%s)
        END_DATE=$(date +%s)
        HISTORIC_PRICES=$(curl -s "https://api.coingecko.com/api/v3/coins/bitcoin/market_chart/range?vs_currency=usd&from=$START_DATE&to=$END_DATE" | jq -r '.prices[][1]')
        AVG_PRICE=$(echo "$HISTORIC_PRICES" | awk '{sum+=$1} END {print sum/NR}')

        # 计算公式
        PRICE=${{ steps.get-price.outputs.price }}
        S2F_VALUE=${{ steps.get-s2f.outputs.s2f}}
        AHR999=$(echo "scale=4; $PRICE / (0.45 * $AVG_PRICE + 0.55 * $S2F_VALUE)" | bc -l)
        echo "ahr999=$AHR999" >> $GITHUB_OUTPUT

    # ========== 智能提醒 ==========
    - name: 发送邮件提醒
      if: |
        steps.calculate.outputs.ahr999 != '' &&
        (steps.calculate.outputs.ahr999 <= 0.45 || steps.calculate.outputs.ahr999 >= 1.2)
      env:
        SMTP_USER: ${{ secrets.SMTP_USER }}
        SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
        RECEIVER: ${{ secrets.RECEIVER_EMAIL }}
      run: |
        python3 -c "
        import smtplib, os
        from email.mime.text import MIMEText
      
        ahr999 = ${{ steps.calculate.outputs.ahr999 }}
        msg = f'''Ahr999自计算结果：{ahr999:.4f}
        输入参数：
        - 当前价格：${{ steps.get-price.outputs.price }}$
        - S2F值：${{ steps.get-s2f.outputs.s2f }}
        - 200周均价：${{ steps.calculate.outputs.avg_price }}$
        '''
      
        mime = MIMEText(msg, 'plain', 'utf-8')
        mime['Subject'] = 'Ahr999指数警报' if ahr999 >=1.2 else '抄底机会提醒'
        mime['From'] = os.environ['SMTP_USER']
        mime['To'] = os.environ['RECEIVER']
      
        with smtplib.SMTP_SSL('smtp.qq.com', 465) as server:
            server.login(os.environ['SMTP_USER'], os.environ['SMTP_PASSWORD'])
            server.sendmail(os.environ['SMTP_USER'], [os.environ['RECEIVER']], mime.as_string())
        "
