name: 非小号Ahr999监控系统
on:
  schedule:
    - cron: '45 * * * *'  # 每小时第45分钟运行
  workflow_dispatch:

jobs:
  monitor:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    # ========== 浏览器环境配置 ==========
    - name: 安装系统依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          chromium-browser \
          libnss3 \
          libx11-xcb1 \
          libxcomposite1 \
          libxcursor1 \
          libxdamage1 \
          libxi6 \
          libxtst6 \
          libxrandr2 \
          libasound2 \
          libatk1.0-0 \
          libgtk-3-0 \
          libgbm1

    # ========== 数据抓取模块 ==========
    - name: 抓取非小号数据
      id: feixiaohao-crawler
      run: |
        node <<EOF
        const fs = require('fs');
        const puppeteer = require('puppeteer');

        async function fetchDataWithRetry(page, url, selector, retries = 3) {
          for (let i = 0; i < retries; i++) {
            try {
              await page.goto(url, {
                waitUntil: 'networkidle2',
                timeout: 60000
              });
              await page.waitForSelector(selector, { timeout: 15000 });
              const value = await page.\$eval(selector, el => {
                return parseFloat(el.textContent.replace(/[^0-9.]/g, ''));
              });
              if (!isNaN(value)) return value;
            } catch (e) {
              console.log(\`第\${i+1}次尝试失败: \${e.message}\`);
              await page.waitForTimeout(5000);  // 重试前等待
            }
          }
          return null;
        }

        (async () => {
          try {
            const browser = await puppeteer.launch({
              executablePath: '/usr/bin/chromium-browser',
              args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--disable-blink-features=AutomationControlled'
              ],
              headless: 'new'
            });

            const page = await browser.newPage();
          
            // 反爬策略
            await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
            await page.setExtraHTTPHeaders({
              'Accept-Language': 'zh-CN,zh;q=0.9'
            });

            // 获取数据 (带重试机制)
            const value = await fetchDataWithRetry(
              page,
              'https://www.feixiaohao.com/data/ahrdata.html',
              'div.price-box > div.val'
            ) || await fetchDataWithRetry(
              page,
              'https://www.feixiaohao.com/data/ahrdata.html',
              'div.coin-price > span.val'
            );

            // 写入输出
            fs.appendFileSync(process.env.GITHUB_OUTPUT, \`ahr999_value=\${value}\`);
            await browser.close();

            if (value === null) {
              console.error('所有数据源均获取失败');
              process.exit(1);
            }

          } catch (error) {
            console.error('全局错误:', error);
            process.exit(1);
          }
        })();
        EOF

    # ========== 邮件通知模块 ==========
    - name: 发送提醒
      if: |
        steps.feixiaohao-crawler.outputs.ahr999_value != '' &&
        (steps.feixiaohao-crawler.outputs.ahr999_value <= 0.8 || steps.feixiaohao-crawler.outputs.ahr999_value >= 1.2)
      env:
        SMTP_USER: ${{ secrets.SMTP_USER }}
        SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
        RECEIVER_EMAIL: ${{ secrets.RECEIVER_EMAIL }}
      run: |
        python3 -c "
        import smtplib, os
        from email.mime.text import MIMEText
      
        value = ${{ steps.feixiaohao-crawler.outputs.ahr999_value }}
        msg = MIMEText(f'当前Ahr999指数：{value:.4f}', 'plain', 'utf-8')
        msg['Subject'] = '非小号监控提醒'
        msg['From'] = os.environ['SMTP_USER']
        msg['To'] = os.environ['RECEIVER_EMAIL']
      
        try:
            with smtplib.SMTP_SSL('smtp.qq.com', 465) as server:
                server.login(os.environ['SMTP_USER'], os.environ['SMTP_PASSWORD'])
                server.sendmail(os.environ['SMTP_USER'], [os.environ['RECEIVER_EMAIL']], msg.as_string())
            print('邮件发送成功')
        except Exception as e:
            print(f'邮件发送失败: {str(e)}')
            exit(1)
        "
